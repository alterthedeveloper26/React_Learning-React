{"ast":null,"code":"var _jsxFileName = \"/home/baohoang0206/Local/source_code/react/Food-order/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport CartContext from \"./cart-context\";\nimport { useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    let updateItems;\n    const existIndex = state.items.findIndex(item => item.id === action.item.id);\n    const beingUpdatedItem = state.items[existIndex];\n\n    if (beingUpdatedItem) {\n      console.log(beingUpdatedItem);\n      const updateItem = { ...beingUpdatedItem,\n        amount: beingUpdatedItem.amount + action.item.amount\n      };\n      updateItems = [...state.items];\n      updateItems[existIndex] = updateItem;\n    } else {\n      updateItems = state.items.concat(action.item); //it return a new array, ref and primitive\n    }\n\n    const updateTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updateItems,\n      totalAmount: updateTotalAmount\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    let updateItems;\n    const beingRemovedItemIndex = state.items.findIndex(item => item.id === action.id);\n    const beingRemovedItem = state.items[beingRemovedItemIndex];\n    const updateTotalAmount = state.totalAmount - beingRemovedItem.price;\n\n    if (beingRemovedItem.amount === 1) {\n      updateItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      beingRemovedItem.amount--;\n    }\n\n    return {\n      items: updateItems,\n      totalAmount: updateTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCart] = useReducer(cartReducer, defaultCartState);\n\n  const addToCartHandler = item => {\n    dispatchCart({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemHandler = id => {\n    dispatchCart({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addToCartHandler,\n    removeItem: removeItemHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"ZY2kzjH0eT2UJ8xdytMWU1wIqqA=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/baohoang0206/Local/source_code/react/Food-order/src/store/CartProvider.js"],"names":["CartContext","useReducer","defaultCartState","items","totalAmount","cartReducer","state","action","type","updateItems","existIndex","findIndex","item","id","beingUpdatedItem","console","log","updateItem","amount","concat","updateTotalAmount","price","beingRemovedItemIndex","beingRemovedItem","filter","CartProvider","props","cartState","dispatchCart","addToCartHandler","removeItemHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import CartContext from \"./cart-context\";\nimport { useReducer } from \"react\";\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    let updateItems;\n\n    const existIndex = state.items.findIndex(\n      (item) => item.id === action.item.id\n    );\n    const beingUpdatedItem = state.items[existIndex];\n\n    if (beingUpdatedItem) {\n      console.log(beingUpdatedItem);\n      const updateItem = {\n        ...beingUpdatedItem,\n        amount: beingUpdatedItem.amount + action.item.amount,\n      };\n      updateItems = [...state.items];\n      updateItems[existIndex] = updateItem;\n    } else {\n      updateItems = state.items.concat(action.item); //it return a new array, ref and primitive\n    }\n\n    const updateTotalAmount =\n      state.totalAmount + action.item.price * action.item.amount;\n\n    return {\n      items: updateItems,\n      totalAmount: updateTotalAmount,\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    let updateItems;\n    const beingRemovedItemIndex = state.items.findIndex(\n      (item) => item.id === action.id\n    );\n    const beingRemovedItem = state.items[beingRemovedItemIndex];\n\n    const updateTotalAmount = state.totalAmount - beingRemovedItem.price;\n\n    if (beingRemovedItem.amount === 1) {\n      updateItems = state.items.filter((item) => item.id !== action.id);\n    } else {\n      beingRemovedItem.amount--;\n    }\n\n    return {\n      items: updateItems,\n      totalAmount: updateTotalAmount,\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = (props) => {\n  const [cartState, dispatchCart] = useReducer(cartReducer, defaultCartState);\n\n  const addToCartHandler = (item) => {\n    dispatchCart({\n      type: \"ADD\",\n      item: item,\n    });\n  };\n\n  const removeItemHandler = (id) => {\n    dispatchCart({\n      type: \"REMOVE\",\n      id: id,\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addToCartHandler,\n    removeItem: removeItemHandler,\n  };\n\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}