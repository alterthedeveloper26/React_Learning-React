{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui.store\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    addToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (existingItem) {\n        existingItem.quantity++;\n        existingItem.totalPrice += existingItem.price;\n      } else {\n        state.items.push({ ...newItem,\n          quantity: 1,\n          totalPrice: newItem.price\n        });\n      }\n    },\n\n    removeFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (!existingItem) {\n        console.log(\"item not exist, bug vcl!\");\n        return;\n      }\n\n      if (existingItem.quantity > 1) {\n        existingItem.quantity--;\n        existingItem.totalPrice -= existingItem.price;\n      } else {\n        state.items = state.items.filter(item => item.id !== id);\n      }\n    }\n\n  }\n});\n\nconst sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Sending cart data!\"\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch(\"https://learn-react-38602-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        dispatch(uiActions.showNotification({\n          status: \"error\",\n          title: \"Error!!!\",\n          message: \"Sending cart data fail!\"\n        }));\n      }\n    };\n\n    try {\n      await sendRequest();\n    } catch (error) {}\n\n    dispatch(uiActions.showNotification({\n      status: \"success\",\n      title: \"Success!\",\n      message: \"Sending cart data successfully!\"\n    }));\n  };\n};\n\nexport default cartSlice.reducer;\nexport const cartActions = cartSlice.actions;","map":{"version":3,"sources":["/home/baohoang0206/Local/source_code/react/advanced-redux/src/store/cart.store.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","addToCart","state","action","newItem","payload","existingItem","find","item","id","quantity","totalPrice","price","push","removeFromCart","console","log","filter","sendCartData","cart","dispatch","showNotification","status","title","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","error","reducer","cartActions","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui.store\";\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n  },\n  reducers: {\n    addToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find((item) => item.id === newItem.id);\n      state.totalQuantity++;\n      if (existingItem) {\n        existingItem.quantity++;\n        existingItem.totalPrice += existingItem.price;\n      } else {\n        state.items.push({\n          ...newItem,\n          quantity: 1,\n          totalPrice: newItem.price,\n        });\n      }\n    },\n    removeFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find((item) => item.id === id);\n      state.totalQuantity--;\n\n      if (!existingItem) {\n        console.log(\"item not exist, bug vcl!\");\n        return;\n      }\n\n      if (existingItem.quantity > 1) {\n        existingItem.quantity--;\n        existingItem.totalPrice -= existingItem.price;\n      } else {\n        state.items = state.items.filter((item) => item.id !== id);\n      }\n    },\n  },\n});\n\nconst sendCartData = (cart) => {\n  return async (dispatch) => {\n    dispatch(\n      uiActions.showNotification({\n        status: \"pending\",\n        title: \"Sending...\",\n        message: \"Sending cart data!\",\n      })\n    );\n\n    const sendRequest = async () => {\n      const response = await fetch(\n        \"https://learn-react-38602-default-rtdb.firebaseio.com/cart.json\",\n        {\n          method: \"PUT\",\n          body: JSON.stringify(cart),\n        }\n      );\n\n      if (!response.ok) {\n        dispatch(\n          uiActions.showNotification({\n            status: \"error\",\n            title: \"Error!!!\",\n            message: \"Sending cart data fail!\",\n          })\n        );\n      }\n    };\n\n    try {\n      await sendRequest();\n    } catch (error) {}\n\n    dispatch(\n      uiActions.showNotification({\n        status: \"success\",\n        title: \"Success!\",\n        message: \"Sending cart data successfully!\",\n      })\n    );\n  };\n};\n\nexport default cartSlice.reducer;\nexport const cartActions = cartSlice.actions;\n"]},"metadata":{},"sourceType":"module"}